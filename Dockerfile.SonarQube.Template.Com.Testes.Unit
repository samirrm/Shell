# Versao do dotnet utilizado para baixar a imagem do docker ex: 6.0
ARG DOTNET_VERSION

FROM mcr.microsoft.com/dotnet/sdk:"${DOTNET_VERSION}"-alpine AS base
RUN apk update && apk upgrade && apk add openjdk11
RUN dotnet tool install --global dotnet-sonarscanner --version 5.15.0
RUN dotnet tool install --global JetBrains.dotCover.GlobalTool
RUN dotnet tool install --global coverlet.console --version 3.1.0

# Token de acesso do Sonar. Ver: https://sonarqube.<dominio>.com.br/account/security/ - e necessario estar logado para gerar um token.
ARG SONAR_TOKEN
# DNS do Sonar: https://sonarqube.<dominio>.com.br. Passado como variavel nas pipelines
ARG SONAR_HOST
# Nome unico do projeto no SonarQube.
ARG PROJECT_KEY
# Caminho do CSPROJ da aplicação a ser scaniada 
ARG PROJECT_CSPROJ
# Caminho do arquivo de TESTE utilizado pela aplicacao
ARG TESTE_CSPROJ

ENV PATH="${PATH}:/root/.dotnet/tools"
 
# Criar um diretório específico para relatórios
RUN mkdir -p /src/reports && chmod -R 777 /src/reports

WORKDIR /src
COPY . .
RUN dotnet sonarscanner begin /k:"${PROJECT_KEY}" /d:sonar.host.url="${SONAR_HOST}" /d:sonar.login="${SONAR_TOKEN}" /d:sonar.cs.dotcover.reportsPaths=dotCover.Output.html /d:sonar.cs.vstest.reportsPaths="/src/reports/test-results.trx" /d:sonar.cs.opencover.reportsPaths="/src/reports/coverage.opencover.xml"
# Rodar os testes com cobertura de código e salvar o relatório de testes
RUN dotnet build "${PROJECT_CSPROJ}" --configfile SonarQube/NuGet.Config
RUN dotnet restore "${TESTE_CSPROJ}" --configfile SonarQube/NuGet.Config
RUN dotnet dotcover test "${TESTE_CSPROJ}" --dcReportType=HTML
RUN dotnet test "${TESTE_CSPROJ}" --logger:"trx;LogFileName=/src/reports/test-results.trx" /p:CollectCoverage=true /p:CoverletOutput=/src/reports/ /p:CoverletOutputFormat=opencover
RUN dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"
